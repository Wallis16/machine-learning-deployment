# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: Ubuntu-20.04

    strategy:
      matrix:
        include:
        - image: diogeneswallis96/mlflow-server:0.0.1
          dockerfile: mlflow/Dockerfile
          context: ./mlflow
        - image: diogeneswallis96/backend-integrated-with-mlflow:0.0.1
          dockerfile: Dockerfile
          context: ./
        - image: diogeneswallis96/streamlit-ml:1.0.0
          dockerfile: streamlit/Dockerfile
          context: ./streamlit

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11.6
      uses: actions/setup-python@v3
      with:
        python-version: "3.11.6"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ matrix.image }}

    - name: Remove :master from tags
      id: remove-master
      run: |
        tags_with_master="${{ steps.meta.outputs.tags }}"
        tags_without_master="${tags_with_master/:master/}"
        echo "::set-output name=tags::${tags_without_master}"

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.remove-master.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
